#include <cpen333/process/subprocess.h>
#include <cpen333/process/shared_memory.h>
#include <chrono>
#include <thread>
#include <string>
#include <iostream>


struct SharedCounters{
  int counts[2];
};

// Usage:
//    malware <name> <index>
// name is any name
// index is 0 or 1
// defaults to name:malware, index:0
int main(int argc, char* argv[]) {

  // extract name and index
  int index = 0;
  std::string name = "malware";
  if (argc > 1) {
    name = argv[1];
  }
  if (argc > 2) {
    index = std::atoi(argv[2]);
  }

  cpen333::process::shared_object<SharedCounters> counters("malware");
  std::cout << name << " " << std::to_string(index)  << " started" << std::endl;

  int misses = 0;
  int oidx = (index+1) % 2;  // other's index
  int lastocount = 0;        // last recorded index of other

  // three misses in a row, he's not there
  while(true) {
    std::this_thread::sleep_for(std::chrono::seconds(3));

    int ocount = 0;
    std::cout << name << " " << std::to_string(index)  << " running" << std::endl;
    // increment my count, check other's
    counters->counts[index]++;
    ocount = counters->counts[oidx];

    // update # of misses
    if (ocount == lastocount) {
      ++misses;
    } else {
      misses = 0;
    }

    // down for the count, relaunch
    if (misses == 3) {
      std::vector<std::string> cmd = {argv[0], name, std::to_string(oidx)};
      cpen333::process::subprocess other(cmd, true, true);  // start in detached mode
    }

    lastocount = ocount;
  }

  return 0;
}